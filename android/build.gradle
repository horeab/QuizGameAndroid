android {
    buildToolsVersion "28.0.3"
    compileSdkVersion 28
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            java.excludes = ['androidTest/**']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            jniLibs.srcDirs = ['libs']
        }
        geoquiz {
            assets.srcDirs = ['assets/tournament_resources/implementations/quizgame', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        geoquizPro {
            assets.srcDirs = ['assets/tournament_resources/implementations/quizgame', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        hangman {
            assets.srcDirs = ['assets/tournament_resources/implementations/hangman', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        hangmanPro {
            assets.srcDirs = ['assets/tournament_resources/implementations/hangman', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        kennstde {
            assets.srcDirs = ['assets/tournament_resources/implementations/kennstde', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        kennstdePro {
            assets.srcDirs = ['assets/tournament_resources/implementations/kennstde', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        anatomy {
            assets.srcDirs = ['assets/tournament_resources/implementations/anatomy', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        anatomyPro {
            assets.srcDirs = ['assets/tournament_resources/implementations/anatomy', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        paintings {
            assets.srcDirs = ['assets/tournament_resources/implementations/paintings', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        paintingsPro {
            assets.srcDirs = ['assets/tournament_resources/implementations/paintings', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        judete {
            assets.srcDirs = ['assets/tournament_resources/implementations/judetelerom', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        astronomy {
            assets.srcDirs = ['assets/tournament_resources/implementations/astronomy', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        astronomyPro {
            assets.srcDirs = ['assets/tournament_resources/implementations/astronomy', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        periodictable {
            assets.srcDirs = ['assets/tournament_resources/implementations/periodictable', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
        periodictablePro {
            assets.srcDirs = ['assets/tournament_resources/implementations/periodictable', 'assets/tournament_resources/main', 'assets/main_resources/main']
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    configurations {
        all {
            exclude module: 'httpclient'
            exclude module: 'commons-logging'
        }
    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }
    defaultConfig {
        applicationId "com.habapps"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "game"
    productFlavors {
/////////////////////////////////////////////////////////////////////////////
        geoquiz {
            applicationIdSuffix ".geoquiz"
            versionCode 2
            versionName "1.1"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/geoquiz_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        geoquizPro {
            applicationIdSuffix ".geoquizpro"
            versionCode 1
            versionName "1.00"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/geoquizpro_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        hangman {
            applicationIdSuffix ".hangman"
            versionCode 5
            versionName "1.4"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/hangman_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        hangmanPro {
            applicationIdSuffix ".hangmanpro"
            versionCode 1
            versionName "1.00"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/hangmanpro_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        kennstde {
            applicationIdSuffix ".kennstde"
            versionCode 1
            versionName "1.00"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/kennstde_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        kennstdePro {
            applicationIdSuffix ".kennstdepro"
            versionCode 1
            versionName "1.00"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/kennstdepro_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        anatomy {
            applicationIdSuffix ".anatomy"
            versionCode 1
            versionName "1.00"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/anatomy_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        anatomyPro {
            applicationIdSuffix ".anatomypro"
            versionCode 1
            versionName "1.00"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/anatomypro_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        paintings {
            applicationIdSuffix ".paintingsnew"
            versionCode 1
            versionName "1.00"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/paintings_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        paintingsPro {
            applicationIdSuffix ".paintingspro"
            versionCode 1
            versionName "1.00"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/paintingspro_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        judete {
            applicationIdSuffix ".judete"
            versionCode 1
            versionName "1.00"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/judete_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        astronomy {
            applicationIdSuffix ".astronomy"
            versionCode 1
            versionName "1.00"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/astronomy_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        astronomyPro {
            applicationIdSuffix ".astronomypro"
            versionCode 1
            versionName "1.00"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/astronomypro_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        periodictable {
            applicationIdSuffix ".periodictable"
            versionCode 1
            versionName "1.00"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/periodictable_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
        periodictablePro {
            applicationIdSuffix ".periodictablepro"
            versionCode 1
            versionName "1.00"
            dimension "game"
            manifestPlaceholders = [appIcon: "@drawable/periodictablepro_icon"]
        }
/////////////////////////////////////////////////////////////////////////////
    }

}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.habapps/com.habapps.AndroidLauncher'
}

// sets up the Android Eclipse project, using the old Ant based build.
eclipse {
    // need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src", 'gen'
        }
    }

    jdt {
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
    }

    classpath {
        plusConfigurations += [project.configurations.compile]
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'
    }

    project {
        name = appName + "-android"
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [COMPILE: [plus: [project.configurations.compile]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value: "true")
                        }
                    }
                }
            }
        }
    }
}
apply plugin: 'com.google.gms.google-services'